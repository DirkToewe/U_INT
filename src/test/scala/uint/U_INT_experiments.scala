package uint

object U_INT_experiments
{
  def main( args: Array[String] ): Unit = {
    println( toLong[      O] )
    println( toLong[      I] )
    println( toLong[    I°O] )
    println( toLong[    I°I] )
    println( toLong[  I°O°O] )
    println( toLong[  I°O°I] )
    println( toLong[  I°I°O] )
    println( toLong[  I°I°I] )
    println( toLong[I°O°O°O] )
    println( toLong[I°O°O°I] )
    println( toLong[I°O°I°O] )
    println( toLong[I°O°I°I] )
    println( toLong[I°I°O°O] )
    println( toLong[I°I°O°I] )
    println( toLong[I°I°I°O] )
    println( toLong[I°I°I°I] )

    println( toLong[(      O)#Plus1] )
    println( toLong[(      I)#Plus1] )
    println( toLong[(    I°O)#Plus1] )
    println( toLong[(    I°I)#Plus1] )
    println( toLong[(  I°O°O)#Plus1] )
    println( toLong[(  I°O°I)#Plus1] )
    println( toLong[(  I°I°O)#Plus1] )
    println( toLong[(  I°I°I)#Plus1] )
    println( toLong[(I°O°O°O)#Plus1] )
    println( toLong[(I°O°O°I)#Plus1] )
    println( toLong[(I°O°I°O)#Plus1] )
    println( toLong[(I°O°I°I)#Plus1] )
    println( toLong[(I°I°O°O)#Plus1] )
    println( toLong[(I°I°O°I)#Plus1] )
    println( toLong[(I°I°I°O)#Plus1] )
    println( toLong[(I°I°I°I)#Plus1] )
    println("----------------")
    println( toLong[       O + O ] )
    println( toLong[       I + O ] )
    println( toLong[     I°O + O ] )
    println( toLong[     I°I + O ] )
    println( toLong[   I°O°O + O ] )
    println( toLong[   I°O°I + O ] )
    println( toLong[   I°I°O + O ] )
    println( toLong[   I°I°I + O ] )
    println( toLong[ I°O°O°O + O ] )
    println( toLong[ I°O°O°I + O ] )
    println( toLong[ I°O°I°O + O ] )
    println( toLong[ I°O°I°I + O ] )
    println( toLong[ I°I°O°O + O ] )
    println( toLong[ I°I°O°I + O ] )
    println( toLong[ I°I°I°O + O ] )
    println( toLong[ I°I°I°I + O ] )
    println("----------------")
    println( toLong[       O + I ] )
    println( toLong[       I + I ] )
    println( toLong[     I°O + I ] )
    println( toLong[     I°I + I ] )
    println( toLong[   I°O°O + I ] )
    println( toLong[   I°O°I + I ] )
    println( toLong[   I°I°O + I ] )
    println( toLong[   I°I°I + I ] )
    println( toLong[ I°O°O°O + I ] )
    println( toLong[ I°O°O°I + I ] )
    println( toLong[ I°O°I°O + I ] )
    println( toLong[ I°O°I°I + I ] )
    println( toLong[ I°I°O°O + I ] )
    println( toLong[ I°I°O°I + I ] )
    println( toLong[ I°I°I°O + I ] )
    println( toLong[ I°I°I°I + I ] )
    println("----------------")
    println( toLong[(      O)#Plus1] )
    println( toLong[(      I)#Plus1] )
    println( toLong[(    I°O)#Plus1] )
    println( toLong[(    I°I)#Plus1] )
    println( toLong[(  I°O°O)#Plus1] )
    println( toLong[(  I°O°I)#Plus1] )
    println( toLong[(  I°I°O)#Plus1] )
    println( toLong[(  I°I°I)#Plus1] )
    println( toLong[(I°O°O°O)#Plus1] )
    println( toLong[(I°O°O°I)#Plus1] )
    println( toLong[(I°O°I°O)#Plus1] )
    println( toLong[(I°O°I°I)#Plus1] )
    println( toLong[(I°I°O°O)#Plus1] )
    println( toLong[(I°I°O°I)#Plus1] )
    println( toLong[(I°I°I°O)#Plus1] )
    println( toLong[(I°I°I°I)#Plus1] )
    println("----------------")
    println( toLong[ (      O) + (I°I°I°I) ].toBinaryString )
    println( toLong[ (      I) + (I°I°I°O) ].toBinaryString )
    println( toLong[ (    I°O) + (I°I°O°I) ].toBinaryString )
    println( toLong[ (    I°I) + (I°I°O°O) ].toBinaryString )
    println( toLong[ (  I°O°O) + (I°O°I°I) ].toBinaryString )
    println( toLong[ (  I°O°I) + (I°O°I°O) ].toBinaryString )
    println( toLong[ (  I°I°O) + (I°O°O°I) ].toBinaryString )
    println( toLong[ (  I°I°I) + (I°O°O°O) ].toBinaryString )
    println( toLong[ (I°O°O°O) + (  I°I°I) ].toBinaryString )
    println( toLong[ (I°O°O°I) + (  I°I°O) ].toBinaryString )
    println( toLong[ (I°O°I°O) + (  I°O°I) ].toBinaryString )
    println( toLong[ (I°O°I°I) + (  I°O°O) ].toBinaryString )
    println( toLong[ (I°I°O°O) + (    I°I) ].toBinaryString )
    println( toLong[ (I°I°O°I) + (    I°O) ].toBinaryString )
    println( toLong[ (I°I°I°O) + (      I) ].toBinaryString )
    println( toLong[ (I°I°I°I) + (      O) ].toBinaryString )
    println("----------------")
    println( toLong[ (      O) + (I°I°I°I) ] )
    println( toLong[ (      I) + (I°I°I°O) ] )
    println( toLong[ (    I°O) + (I°I°O°I) ] )
    println( toLong[ (    I°I) + (I°I°O°O) ] )
    println( toLong[ (  I°O°O) + (I°O°I°I) ] )
    println( toLong[ (  I°O°I) + (I°O°I°O) ] )
    println( toLong[ (  I°I°O) + (I°O°O°I) ] )
    println( toLong[ (  I°I°I) + (I°O°O°O) ] )
    println( toLong[ (I°O°O°O) + (  I°I°I) ] )
    println( toLong[ (I°O°O°I) + (  I°I°O) ] )
    println( toLong[ (I°O°I°O) + (  I°O°I) ] )
    println( toLong[ (I°O°I°I) + (  I°O°O) ] )
    println( toLong[ (I°I°O°O) + (    I°I) ] )
    println( toLong[ (I°I°O°I) + (    I°O) ] )
    println( toLong[ (I°I°I°O) + (      I) ] )
    println( toLong[ (I°I°I°I) + (      O) ] )
    println("----------------")
    ;{
      println( toLong[ (I ° I°O°I°I ° O°I°O°O ° O°I°I°O ° I°O°I°I ° O°O°O°I) + (I ° O°O°O°O ° I°I°O°I ° O°O°O°O ° I°I°O°O ° O°I°I°O ° O°I°O°O) + (I ° I°O°I°I ° O°I°O°O ° O°I°I°O ° I°O°I°I ° O°O°O°I) ] )
      val a = 1337*1337L
      val b = 42*1337*314L
      println(a+b+a)
      println( (a+b+a).toBinaryString.length )
      println( a.toBinaryString map { case '0' => "O" case '1' => "I" } mkString "°" )
      println( b.toBinaryString map { case '0' => "O" case '1' => "I" } mkString "°" )
    }
    ;{
      println( toLong[ (I°I°O°I°I°O°I°O°O°O°I°I°O°I°O°I°I°O°O°O°I) * (I°O°O°O°O°I°I°O°I°O°O°O°O°I°I°O°O°O°I°I°O°O°I°O°O) ] )
      val a = 1337*1337L
      val b = 42*1337*314L
      println(a*b)
      println( (a*b).toBinaryString.length )
      println( a.toBinaryString map { case '0' => "O" case '1' => "I" } mkString "°" )
      println( b.toBinaryString map { case '0' => "O" case '1' => "I" } mkString "°" )
    }
    ;{
      import java.lang.Long.parseLong

      val a = parseLong("101001100",2)
      val b = parseLong(  "1100001",2)

      type A = I°O°I°O°O°I°I°O°O
      type B =     I°I°O°O°O°O°I

      println(a*b)
      println( toLong[A*B] )
    }
  }
}
